package adapter.base;

/**
 * Description: 客户端类<br/>
 *
 * 适配器模式：将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作
 *
 * 在软件开发中，当系统的数据和行为都正确，但接口不符时，我们应该考虑用适配器，目的是使控制范围之外的一个原有对象与某个接口匹配。
 * 适配器模式主要应用与希望复用一些现存的类，但是接口又与复用环境要求不一致的情况。
 *
 * 何时使用适配器模式？
 * 想使用一个已经存在的类，但如果它的接口，也就是它的方法和你的要求不相同时，就应该使用适配器模式。
 * 两个类所做的事情相同或相似，但是具有不同的接口时使用。
 * 在软件设计的初期，应该避免两个类的功能类似的重复设计，若有重复的功能设计，应考虑进行系统重构
 * 在软件维护后期，如果维护人员编写类与系统中已经存在的类的功能类似，这时可以考虑使用适配器模式
 * 软件设计之初，考虑使用第三方开发组件时，而这个组件的解耦与系统中的解耦是不相同的时候，没有必要为了迎合第三方组件而改动自己设计的接口，这时也可以使用适配器模式
 * 这样做的好处是客户端可以统一调用同一接口，使接口的调用更简单、更直接、更紧凑。
 *
 * @author wangzhao
 * @version 1.0
 * @email 13132398914@163.com
 * @date 2024/7/31 9:34
 */
public class Client {

    public static void main(String[] args) {
        Adaptee adaptee = new Adaptee();
        Adapter adapter = new Adapter();
        adapter.setAdaptee(adaptee);
        Target target = adapter;
        //客户端调用的是request方法，底层调用的却是adaptee的方法
        target.request();
    }
}
